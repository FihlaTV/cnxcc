cnxcc Module

Carlos Ruiz Díaz

   ConexionGroup S.A.

   Copyright © 2012 Carlos Ruiz Díaz, carlos.ruizdiaz@gmail.com
   ____________________________________________________________

   Table of Contents

   1. Admin Guide

        1. Overview
        2. Dependencies

              2.1. Modules

        3. Parameters

              3.1. dlg_flag (integer)
              3.2. credit_check_period (integer)
              3.3. number_of_timers (integer)

        4. Functions

              4.1. cnxcc_set_max_time()               
              4.2. cnxcc_set_max_credit()

        5. Exported RPC Commands

              5.1. cnxcc.active_clients
              5.2. cnxcc.check_client
              5.3. cnxcc.kill_call          

        6. Events

        7. Web Interface

        8. Examples  
   
Chapter 1. Admin Guide

   Table of Contents

    1. Overview
    2. Dependencies

        2.1. Modules

    3. Parameters

        3.1. dlg_flag (integer)
        3.2. credit_check_period (integer)
        3.3. number_of_timers (integer)

    4. Functions

        4.1. cnxcc_set_max_time()               
        4.2. cnxcc_set_max_credit()               

    5. Exported RPC Commands

        5.1. cnxcc.active_clients
        5.2. cnxcc.check_client
        5.3. cnxcc.kill_call

    6. Events

    7. Web Interface
    
        
1. Overview
   
   This module was designed to act as a mechanism to limit call duration based on credit information parameters.
   After getting the credit information of the call being set up, you can instruct the module to start monitoring 
   the consumed credit to shutdown a single call or a group of calls in case of credit exhaustion.

   Every call is associated to an unique client/customer identifier. If a credit event occurs, all calls hooked 
   to this identifier are automatically shutdown.

   Cnxcc is dialog-aware so there's no need to explicitly allocate/deallocate the monitoring. Only a single function 
   call inside the script is needed upon reception of the INVITE.

   The credit discount rate is proportional to the number of calls grouped inside an identifier. Once the setup
   of the first call is done, the information remains while the call is active. If the customer starts a new call with
   the same routing criteria, it will land in the same monitoring bag and it will consume the same pool of credit in
   rates that are equal to the cost per second of both calls.

   If your accounting program does not maintain the state of the call in real time, this module can provide you
   that ability.

2. Dependencies

   The following module must be loaded before this module:
   * dialog

3. Parameters

3.1. dlg_flag (integer)
   
   Flag to indicate if the dialog must be monitored or not. Messages are flagged with this value if we call one of
   the monitoring functions.

   Example:
   ...
   modparam("cnxcc", "dlg_flag", 29)
   ...

3.2. credit_check_period (integer)

   Indicates how often the credit checking function should be called. It is directly related to the precison of the 
   module. The maximum precision is 1, which means that every call is checked every one second. 

   Values greater than 1 leads to precision lost but less CPU consumption.

   Example:
   ...
   modparam("cnxcc", "credit_check_period", 1)
   ...

3.3. number_of_timers (integer)

   Number of timer processes the module will set up to perform the monitoring tasks. The value must be an even number. In
   case it is not, it will be automatically rounded.

   Example:
   ...
   modparam("cnxcc", "number_of_timers", 4)
   ...

4. Functions

4.1. cnxcc_set_max_time()

  Specifies the amount of time the call should last at most.

  Example:
  ...
  $var(customer) = "john-doe-123-basic";
  $var(max_time) = 120;

  cnxcc_set_max_tim ("$var(customer)", "$var(max_time)");
  ...

4.2. cnxcc_set_max_credit()
  
  Specifies the initial pulse, final pulse, max credit and cost per second of a call. The discount
  is calculated in pulses (30/6, 1/1, etc) and sustracted from the pool of credit.

  Example:
  ...
  $var(customer) = "john-doe-123-premium";
  $var(credit) = "100";
  $var(cps)   = "2.00";		# cost per second
  $var(initial_p)   = "030";	# intial pulse
  $var(final_p)   = "006";	# final pulse

  cnxcc_set_max_credit("$var(customer)", "$var(credit)", "$var(cps)", "$var(initial_p)", "$var(final_p)");
  ...

5. Exported RPC Commands

5.1. cnxcc.active_clients

  Retrieves all calls grouped by their identifiers. 

  Parameters: none

  Example:
  ...
  sercmd cnxcc.active_clients
  ...
  
5.2. cnxcc.check_client

  Retrives all calls from a particular identifier.

  Parameters: client/customer identifier

  Example:
  ...
  sercmd cnxcc.check_client john-doe-123-premium
  ...

5.3. cnxcc.kill_call
  
  Kills an active call using its call ID.

  Parameters: call ID.

  Example:
  ...
  sercmd cnxcc.kill_call qumojlaahitafih@carlosrdcnx-laptop.site
  ...

6. Events
  
  When a call is forced to end an event route is automatically invoked. This route is suited with a fake OPTIONS 
  message containing the call ID, ftag and ttag of the original call so it can be located somehow in the accounting
  database.

  Example:
  ...
  event_route[cnxcc:call-shutdown]
  {
        xlog("L_INFO", "[$ci]: call killed");

	# perform some kind of notification, database update, email sending, etc
  }
  ...

7. Web Interface

  The module contains a web management interface completely optional. With it, you can review your calls in real time 
  and hang them up if necessary. 

  Link: https://github.com/caruizdiaz/cnxcc-web

8. Examples

   route[CNXCC]
   {
      $var(client)		= "test-client-0-123-01";
      $var(credit) 		= "50";
      $var(cost_per_sec) 	= "0.5";
      $var(i_pulse)		= "30";
      $var(f_pulse)		= "6";
      
      if (!cnxcc_set_max_credit("$var(client)",
      			  "$var(credit)", 
      			  "$var(cost_per_sec)", 
      			  "$var(i_pulse)", 
      			  "$var(f_pulse)")) {
   	   xlog("Error setting up credit control");
      }
   }

  event_route[cnxcc:call-shutdown]
  {
        xlog("L_INFO", "[$ci]: call killed");

        
  }
